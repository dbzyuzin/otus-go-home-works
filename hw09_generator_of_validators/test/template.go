package main

import (
	"text/template"
)

type ValidationMethod struct {
	StructName string
	Fields     []ValidationField
}

type ValidationField struct {
	Steps []ValidationCondition
}

type ValidationCondition struct {
	IsSlice   bool
	Condition string
	FieldName string
	ErrorName string
}

type FileTemplateMetadata struct {
	Package string
	Structs []ValidationMethod
}

var (
	mainFile = `// Code generated by cool go-validate tool; DO NOT EDIT.
package {{ .Package }}

import (
	"errors"
	"strings"
	"strconv"
)

type ValidationError struct {
	Field string
	Err error
}
{{range .Structs}}
{{template "validation method" .}}
{{end}}

`
	validationMethod = `func (s {{.StructName}}) Validate() (validationErrors []ValidationError, err error)  {
	{{range .Fields}}{{range .Steps}}{{if .IsSlice}}
	for _, elem := range s.{{.FieldName}} {
		if {{.Condition}} {
			validationErrors = append(validationErrors, ValidationError {
				Field:    "{{.FieldName}}",
				Err:      "{{.ErrorName}}"
			})
		}
	}{{else}}if {{.Condition}} {
		validationErrors = append(validationErrors, ValidationError {
			Field:    "{{.FieldName}}",
			Err:      {{.ErrorName}},
		})
	}
	{{end}}
	{{end}}
	{{end}}
		
	return 
}`
)

func parseTemplate() (*template.Template, error) {
	tmpl, err := template.New("validation method").Parse(validationMethod)
	if err != nil {
		return nil, err
	}
	tmpl, err = tmpl.New("main").Parse(mainFile)
	if err != nil {
		return nil, err
	}

	return tmpl, nil
}
